#!/usr/bin/env bash

UNAMEOUT="$(uname -s)"

WHITE='\033[1;37m'
NC='\033[0m'

# Verify operating system is supported...
case "${UNAMEOUT}" in
    Linux*)             MACHINE=linux;;
    Darwin*)            MACHINE=mac;;
    *)                  MACHINE="UNKNOWN"
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo "Unsupported operating system [$(uname -s)]. Laravel Duck supports macOS, Linux, and Windows (WSL2)." >&2

    exit 1
fi

# Source the ".env" file
if [ -f ./.env ]; then
    source ./.env
fi

# Define environment variables...
export APP_PORT=${APP_PORT:-80}
export APP_SERVICE=${APP_SERVICE:-"web.app"}
export DB_PORT=${DB_PORT:-3306}
export WWWUSER=${WWWUSER:-$UID}
export WWWGROUP=${WWWGROUP:-$(id -g)}

# Function that outputs Duck is not running...
function duck_is_not_running {
    echo -e "${WHITE}Duck is not running.${NC}" >&2

    exit 1
}

if [ -z "$DUCK_SKIP_CHECKS" ]; then
    # Ensure that Docker is running...
    if ! docker info > /dev/null 2>&1; then
        echo -e "${WHITE}Docker is not running.${NC}" >&2

        exit 1
    fi

    # Determine if Duck is currently up...
    PSRESULT="$(docker-compose ps -q)"
    if docker-compose ps | grep $APP_SERVICE | grep 'Exit'; then
        echo -e "${WHITE}Shutting down old Duck processes...${NC}" >&2

        docker-compose down > /dev/null 2>&1

        EXEC="no"
    elif [ -n "$PSRESULT" ]; then
        EXEC="yes"
    else
        EXEC="no"
    fi
else
    EXEC="yes"
fi

if [ $# -gt 0 ]; then
    # Proxy PHP commands to the "php" binary on the application container...
    if [ "$1" == "php" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                -u duck \
                "$APP_SERVICE" \
                php "$@"
        else
            duck_is_not_running
        fi

    # Proxy Composer commands to the "composer" binary on the application container...
    elif [ "$1" == "composer" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                -u duck \
                "$APP_SERVICE" \
                composer "$@"
        else
            duck_is_not_running
        fi

    # Initiate a MySQL CLI terminal session within the "mariadb" container...
    elif [ "$1" == "mariadb" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                mariadb \
                bash -c 'MYSQL_PWD=${MYSQL_PASSWORD} mysql -u ${MYSQL_USER} ${MYSQL_DATABASE}'
        else
            duck_is_not_running
        fi

    elif [ "$1" == "redis" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                redis \
                redis-cli "$@"
        else
            duck_is_not_running
        fi

    # Initiate a Bash shell within the application container...
    elif [ "$1" == "shell" ] || [ "$1" == "bash" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                -u duck \
                "$APP_SERVICE" \
                bash "$@"
        else
            duck_is_not_running
        fi

    # Initiate a root user Bash shell within the application container...
    elif [ "$1" == "root-shell" ] ; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                "$APP_SERVICE" \
                bash "$@"
        else
            duck_is_not_running
        fi

    # Start docker with docker sync
    elif [ "$1" == "start" ] ; then
        shift 1

        if [ "$1" == "--sync" ]; then
            docker-sync start
        fi
        docker-compose up -d

    # Stop docker and docker sync
    elif [ "$1" == "stop" ] ; then
        shift 1
        
        if [ "$1" == "--sync" ]; then
            docker-sync stop
        fi
        
        if [ "$EXEC" == "yes" ]; then
            docker-compose stop
        else
            duck_is_not_running
        fi
        
    # delete container
    elif [ "$1" == "clean" ] ; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose down
        else
            duck_is_not_running
        fi
        docker-sync clean

    # Pass unknown commands to the "docker-compose" binary...
    else
        docker-compose "$@"
    fi
else
    docker-compose ps
fi
